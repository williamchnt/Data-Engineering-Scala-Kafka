[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\nostr\AppData\Local\Temp\idea3.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\nostr\AppData\Local\Temp\idea3.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Oracle Corporation Java 17)
[debug]       Load.loadUnit: plugins took 142.226ms
[debug]       Load.loadUnit: defsScala took 1.0597ms
[debug] [Loading] Scanning directory C:\Users\nostr\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\nostr\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 18.9389 ms
[debug]           Load.resolveProject(global-plugins) took 40.1583ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\nostr\.sbt\1.0\plugins, plugins: List(<none>))) took 79.3534ms
[debug] [Loading] Done in C:\Users\nostr\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 111.2847ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2507ms
[debug]     Load.loadUnit(file:/C:/Users/nostr/.sbt/1.0/plugins/, ...) took 269.7895ms
[debug]   Load.apply: load took 716.8189ms
[debug]   Load.apply: resolveProjects took 5.0391ms
[debug]   Load.apply: finalTransforms took 74.8321ms
[debug]   Load.apply: config.delegates took 13.6734ms
[debug]   Load.apply: Def.make(settings)... took 612.1141ms
[debug]   Load.apply: structureIndex took 147.3799ms
[debug]   Load.apply: mkStreams took 2.773ms
[info] loading global plugins from C:\Users\nostr\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3407.7505ms
[debug]           Load.loadUnit: plugins took 34.1806ms
[debug]           Load.loadUnit: defsScala took 0.006ms
[debug] [Loading] Scanning directory C:\Users\nostr\OneDrive\Documents\Efrei\M1\scala\projet\project
[debug]             Load.loadUnit: mkEval took 4.9991ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\nostr\OneDrive\Documents\Efrei\M1\scala\projet\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.7966 ms
[info] loading settings for project projet-build from idea3.sbt ...
[debug]               Load.resolveProject(projet-build) took 8.949ms
[debug]             Load.loadTransitive: finalizeProject(Project(id projet-build, base: C:\Users\nostr\OneDrive\Documents\Efrei\M1\scala\projet\project, plugins: List(<none>))) took 12.6202ms
[debug] [Loading] Done in C:\Users\nostr\OneDrive\Documents\Efrei\M1\scala\projet\project, returning: (projet-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 189.9257ms
[debug]           Load.loadUnit: cleanEvalClasses took 14.0404ms
[debug]         Load.loadUnit(file:/C:/Users/nostr/OneDrive/Documents/Efrei/M1/scala/projet/project/, ...) took 240.1852ms
[debug]       Load.apply: load took 242.3657ms
[debug]       Load.apply: resolveProjects took 0.1684ms
[debug]       Load.apply: finalTransforms took 12.5113ms
[debug]       Load.apply: config.delegates took 0.5769ms
[debug]       Load.apply: Def.make(settings)... took 111.9152ms
[debug]       Load.apply: structureIndex took 41.5053ms
[debug]       Load.apply: mkStreams took 0.0032ms
[info] loading project definition from C:\Users\nostr\OneDrive\Documents\Efrei\M1\scala\projet\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 873.7552ms
[debug]     Load.loadUnit: defsScala took 0.0123ms
[debug] [Loading] Scanning directory C:\Users\nostr\OneDrive\Documents\Efrei\M1\scala\projet
[debug]       Load.loadUnit: mkEval took 1.9176ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\nostr\OneDrive\Documents\Efrei\M1\scala\projet, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.182 ms
[info] loading settings for project projet from build.sbt ...
[debug]         Load.resolveProject(projet) took 31.6735ms
[debug]       Load.loadTransitive: finalizeProject(Project(id projet, base: C:\Users\nostr\OneDrive\Documents\Efrei\M1\scala\projet, plugins: List(<none>))) took 36.4163ms
[debug] [Loading] Done in C:\Users\nostr\OneDrive\Documents\Efrei\M1\scala\projet, returning: (projet)
[debug]     Load.loadUnit: loadedProjectsRaw took 98.815ms
[debug]     Load.loadUnit: cleanEvalClasses took 22.8146ms
[debug]   Load.loadUnit(file:/C:/Users/nostr/OneDrive/Documents/Efrei/M1/scala/projet/, ...) took 997.358ms
[debug] Load.apply: load took 999.5346ms
[debug] Load.apply: resolveProjects took 0.1794ms
[debug] Load.apply: finalTransforms took 33.3677ms
[debug] Load.apply: config.delegates took 0.4132ms
[debug] Load.apply: Def.make(settings)... took 100.9183ms
[debug] Load.apply: structureIndex took 33.4923ms
[debug] Load.apply: mkStreams took 0.0026ms
[info] set current project to scala (in build file:/C:/Users/nostr/OneDrive/Documents/Efrei/M1/scala/projet/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 56737 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 56737, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to scala (in build file:/C:/Users/nostr/OneDrive/Documents/Efrei/M1/scala/projet/)
[debug] > Exec(idea-shell, None, None)
