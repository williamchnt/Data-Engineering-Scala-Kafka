[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\nostr\AppData\Local\Temp\idea9.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\nostr\AppData\Local\Temp\idea9.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Oracle Corporation Java 17)
[debug]       Load.loadUnit: plugins took 175.4792ms
[debug]       Load.loadUnit: defsScala took 0.9051ms
[debug] [Loading] Scanning directory C:\Users\nostr\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\nostr\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 29.8218 ms
[debug]           Load.resolveProject(global-plugins) took 78.3275ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\nostr\.sbt\1.0\plugins, plugins: List(<none>))) took 141.9318ms
[debug] [Loading] Done in C:\Users\nostr\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 194.15ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3955ms
[debug]     Load.loadUnit(file:/C:/Users/nostr/.sbt/1.0/plugins/, ...) took 393.492ms
[debug]   Load.apply: load took 7902.1627ms
[debug]   Load.apply: resolveProjects took 7.8404ms
[debug]   Load.apply: finalTransforms took 127.7919ms
[debug]   Load.apply: config.delegates took 18.1143ms
[debug]   Load.apply: Def.make(settings)... took 945.7274ms
[debug]   Load.apply: structureIndex took 286.2498ms
[debug]   Load.apply: mkStreams took 4.6462ms
[info] loading global plugins from C:\Users\nostr\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 13169.0675ms
[debug]           Load.loadUnit: plugins took 81.6664ms
[debug]           Load.loadUnit: defsScala took 0.0147ms
[debug] [Loading] Scanning directory C:\Users\nostr\OneDrive\Documents\Efrei\M1\scala\projet\project
[debug]             Load.loadUnit: mkEval took 13.8863ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\nostr\OneDrive\Documents\Efrei\M1\scala\projet\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 3.6469 ms
[info] loading settings for project projet-build from idea9.sbt ...
[debug]               Load.resolveProject(projet-build) took 6.5582ms
[debug]             Load.loadTransitive: finalizeProject(Project(id projet-build, base: C:\Users\nostr\OneDrive\Documents\Efrei\M1\scala\projet\project, plugins: List(<none>))) took 11.6385ms
[debug] [Loading] Done in C:\Users\nostr\OneDrive\Documents\Efrei\M1\scala\projet\project, returning: (projet-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 346.2935ms
[debug]           Load.loadUnit: cleanEvalClasses took 31.5375ms
[debug]         Load.loadUnit(file:/C:/Users/nostr/OneDrive/Documents/Efrei/M1/scala/projet/project/, ...) took 463.7379ms
[debug]       Load.apply: load took 468.9646ms
[debug]       Load.apply: resolveProjects took 0.2927ms
[debug]       Load.apply: finalTransforms took 36.5554ms
[debug]       Load.apply: config.delegates took 0.9445ms
[debug]       Load.apply: Def.make(settings)... took 215.5511ms
[debug]       Load.apply: structureIndex took 91.1905ms
[debug]       Load.apply: mkStreams took 0.0041ms
[info] loading project definition from C:\Users\nostr\OneDrive\Documents\Efrei\M1\scala\projet\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 1461.8513ms
[debug]     Load.loadUnit: defsScala took 0.0082ms
[debug] [Loading] Scanning directory C:\Users\nostr\OneDrive\Documents\Efrei\M1\scala\projet
[debug]       Load.loadUnit: mkEval took 1.4031ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\nostr\OneDrive\Documents\Efrei\M1\scala\projet, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 7.134 ms
[info] loading settings for project projet from build.sbt ...
[debug]         Load.resolveProject(projet) took 93.8672ms
[debug]       Load.loadTransitive: finalizeProject(Project(id projet, base: C:\Users\nostr\OneDrive\Documents\Efrei\M1\scala\projet, plugins: List(<none>))) took 103.7396ms
[debug] [Loading] Done in C:\Users\nostr\OneDrive\Documents\Efrei\M1\scala\projet, returning: (projet)
[debug]     Load.loadUnit: loadedProjectsRaw took 258.8285ms
[debug]     Load.loadUnit: cleanEvalClasses took 87.2054ms
[debug]   Load.loadUnit(file:/C:/Users/nostr/OneDrive/Documents/Efrei/M1/scala/projet/, ...) took 1811.5219ms
[debug] Load.apply: load took 1819.1519ms
[debug] Load.apply: resolveProjects took 0.3588ms
[debug] Load.apply: finalTransforms took 81.2672ms
[debug] Load.apply: config.delegates took 0.6799ms
[debug] Load.apply: Def.make(settings)... took 186.822ms
[debug] Load.apply: structureIndex took 73.275ms
[debug] Load.apply: mkStreams took 0.0038ms
[info] set current project to scala (in build file:/C:/Users/nostr/OneDrive/Documents/Efrei/M1/scala/projet/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 56350 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 56350, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to scala (in build file:/C:/Users/nostr/OneDrive/Documents/Efrei/M1/scala/projet/)
[debug] > Exec(idea-shell, None, None)
