[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\nostr\AppData\Local\Temp\idea4.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\nostr\AppData\Local\Temp\idea4.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Oracle Corporation Java 17)
[debug]       Load.loadUnit: plugins took 327.4868ms
[debug]       Load.loadUnit: defsScala took 0.9053ms
[debug] [Loading] Scanning directory C:\Users\nostr\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\nostr\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 42.0168 ms
[debug]           Load.resolveProject(global-plugins) took 99.3421ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\nostr\.sbt\1.0\plugins, plugins: List(<none>))) took 176.4938ms
[debug] [Loading] Done in C:\Users\nostr\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 409.9603ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.6345ms
[debug]     Load.loadUnit(file:/C:/Users/nostr/.sbt/1.0/plugins/, ...) took 788.539ms
[debug]   Load.apply: load took 7917.7169ms
[debug]   Load.apply: resolveProjects took 10.5879ms
[debug]   Load.apply: finalTransforms took 86.6577ms
[debug]   Load.apply: config.delegates took 11.8926ms
[debug]   Load.apply: Def.make(settings)... took 696.4307ms
[debug]   Load.apply: structureIndex took 165.0394ms
[debug]   Load.apply: mkStreams took 3.0527ms
[info] loading global plugins from C:\Users\nostr\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 11412.3492ms
[debug]           Load.loadUnit: plugins took 26.6822ms
[debug]           Load.loadUnit: defsScala took 0.0091ms
[debug] [Loading] Scanning directory C:\Users\nostr\OneDrive\Documents\Efrei\M1\scala\projet\project
[debug]             Load.loadUnit: mkEval took 5.1727ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\nostr\OneDrive\Documents\Efrei\M1\scala\projet\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 3.104 ms
[info] loading settings for project projet-build from idea4.sbt ...
[debug]               Load.resolveProject(projet-build) took 7.6004ms
[debug]             Load.loadTransitive: finalizeProject(Project(id projet-build, base: C:\Users\nostr\OneDrive\Documents\Efrei\M1\scala\projet\project, plugins: List(<none>))) took 11.8993ms
[debug] [Loading] Done in C:\Users\nostr\OneDrive\Documents\Efrei\M1\scala\projet\project, returning: (projet-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 197.3255ms
[debug]           Load.loadUnit: cleanEvalClasses took 17.5ms
[debug]         Load.loadUnit(file:/C:/Users/nostr/OneDrive/Documents/Efrei/M1/scala/projet/project/, ...) took 243.2776ms
[debug]       Load.apply: load took 246.7924ms
[debug]       Load.apply: resolveProjects took 0.1595ms
[debug]       Load.apply: finalTransforms took 26.1767ms
[debug]       Load.apply: config.delegates took 0.6729ms
[debug]       Load.apply: Def.make(settings)... took 114.5451ms
[debug]       Load.apply: structureIndex took 43.3826ms
[debug]       Load.apply: mkStreams took 0.0029ms
[info] loading project definition from C:\Users\nostr\OneDrive\Documents\Efrei\M1\scala\projet\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 930.0846ms
[debug]     Load.loadUnit: defsScala took 0.0034ms
[debug] [Loading] Scanning directory C:\Users\nostr\OneDrive\Documents\Efrei\M1\scala\projet
[debug]       Load.loadUnit: mkEval took 0.6637ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\nostr\OneDrive\Documents\Efrei\M1\scala\projet, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.6307 ms
[info] loading settings for project projet from build.sbt ...
[debug]         Load.resolveProject(projet) took 47.7119ms
[debug]       Load.loadTransitive: finalizeProject(Project(id projet, base: C:\Users\nostr\OneDrive\Documents\Efrei\M1\scala\projet, plugins: List(<none>))) took 51.8476ms
[debug] [Loading] Done in C:\Users\nostr\OneDrive\Documents\Efrei\M1\scala\projet, returning: (projet)
[debug]     Load.loadUnit: loadedProjectsRaw took 124.6129ms
[debug]     Load.loadUnit: cleanEvalClasses took 39.1412ms
[debug]   Load.loadUnit(file:/C:/Users/nostr/OneDrive/Documents/Efrei/M1/scala/projet/, ...) took 1095.6216ms
[debug] Load.apply: load took 1098.3396ms
[debug] Load.apply: resolveProjects took 0.2139ms
[debug] Load.apply: finalTransforms took 46.3031ms
[debug] Load.apply: config.delegates took 0.5909ms
[debug] Load.apply: Def.make(settings)... took 112.129ms
[debug] Load.apply: structureIndex took 41.5858ms
[debug] Load.apply: mkStreams took 0.0027ms
[info] set current project to scala (in build file:/C:/Users/nostr/OneDrive/Documents/Efrei/M1/scala/projet/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 56350 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 56350, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to scala (in build file:/C:/Users/nostr/OneDrive/Documents/Efrei/M1/scala/projet/)
[debug] > Exec(idea-shell, None, None)
