[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\nostr\AppData\Local\Temp\idea2.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\nostr\AppData\Local\Temp\idea2.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Oracle Corporation Java 17)
[debug]       Load.loadUnit: plugins took 105.6673ms
[debug]       Load.loadUnit: defsScala took 0.3225ms
[debug] [Loading] Scanning directory C:\Users\nostr\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\nostr\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 23.4252 ms
[debug]           Load.resolveProject(global-plugins) took 47.8941ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\nostr\.sbt\1.0\plugins, plugins: List(<none>))) took 98.1409ms
[debug] [Loading] Done in C:\Users\nostr\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 150.8295ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2316ms
[debug]     Load.loadUnit(file:/C:/Users/nostr/.sbt/1.0/plugins/, ...) took 267.8265ms
[debug]   Load.apply: load took 8848.0441ms
[debug]   Load.apply: resolveProjects took 6.819ms
[debug]   Load.apply: finalTransforms took 111.2924ms
[debug]   Load.apply: config.delegates took 17.7518ms
[debug]   Load.apply: Def.make(settings)... took 704.2462ms
[debug]   Load.apply: structureIndex took 158.1663ms
[debug]   Load.apply: mkStreams took 2.2541ms
[info] loading global plugins from C:\Users\nostr\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 12262.3129ms
[debug]           Load.loadUnit: plugins took 70.0444ms
[debug]           Load.loadUnit: defsScala took 0.0077ms
[debug] [Loading] Scanning directory C:\Users\nostr\OneDrive\Documents\Efrei\M1\scala\projet\project
[debug]             Load.loadUnit: mkEval took 8.0065ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\nostr\OneDrive\Documents\Efrei\M1\scala\projet\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.8173 ms
[info] loading settings for project projet-build from idea2.sbt ...
[debug]               Load.resolveProject(projet-build) took 3.622ms
[debug]             Load.loadTransitive: finalizeProject(Project(id projet-build, base: C:\Users\nostr\OneDrive\Documents\Efrei\M1\scala\projet\project, plugins: List(<none>))) took 6.1205ms
[debug] [Loading] Done in C:\Users\nostr\OneDrive\Documents\Efrei\M1\scala\projet\project, returning: (projet-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 159.2362ms
[debug]           Load.loadUnit: cleanEvalClasses took 12.6514ms
[debug]         Load.loadUnit(file:/C:/Users/nostr/OneDrive/Documents/Efrei/M1/scala/projet/project/, ...) took 244.3373ms
[debug]       Load.apply: load took 247.7447ms
[debug]       Load.apply: resolveProjects took 0.149ms
[debug]       Load.apply: finalTransforms took 11.7851ms
[debug]       Load.apply: config.delegates took 0.4777ms
[debug]       Load.apply: Def.make(settings)... took 117.3956ms
[debug]       Load.apply: structureIndex took 54.2085ms
[debug]       Load.apply: mkStreams took 0.0031ms
[info] loading project definition from C:\Users\nostr\OneDrive\Documents\Efrei\M1\scala\projet\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 895.2378ms
[debug]     Load.loadUnit: defsScala took 0.0043ms
[debug] [Loading] Scanning directory C:\Users\nostr\OneDrive\Documents\Efrei\M1\scala\projet
[debug]       Load.loadUnit: mkEval took 0.6082ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\nostr\OneDrive\Documents\Efrei\M1\scala\projet, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 4.3311 ms
[info] loading settings for project projet from build.sbt ...
[debug]         Load.resolveProject(projet) took 58.6472ms
[debug]       Load.loadTransitive: finalizeProject(Project(id projet, base: C:\Users\nostr\OneDrive\Documents\Efrei\M1\scala\projet, plugins: List(<none>))) took 64.5186ms
[debug] [Loading] Done in C:\Users\nostr\OneDrive\Documents\Efrei\M1\scala\projet, returning: (projet)
[debug]     Load.loadUnit: loadedProjectsRaw took 154.5768ms
[debug]     Load.loadUnit: cleanEvalClasses took 60.0424ms
[debug]   Load.loadUnit(file:/C:/Users/nostr/OneDrive/Documents/Efrei/M1/scala/projet/, ...) took 1111.8102ms
[debug] Load.apply: load took 1115.3546ms
[debug] Load.apply: resolveProjects took 0.2531ms
[debug] Load.apply: finalTransforms took 44.4944ms
[debug] Load.apply: config.delegates took 0.5358ms
[debug] Load.apply: Def.make(settings)... took 119.3507ms
[debug] Load.apply: structureIndex took 40.0061ms
[debug] Load.apply: mkStreams took 0.0024ms
[info] set current project to scala (in build file:/C:/Users/nostr/OneDrive/Documents/Efrei/M1/scala/projet/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 56350 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 56350, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to scala (in build file:/C:/Users/nostr/OneDrive/Documents/Efrei/M1/scala/projet/)
[debug] > Exec(idea-shell, None, None)
